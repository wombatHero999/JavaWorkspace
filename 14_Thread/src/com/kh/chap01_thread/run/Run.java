package com.kh.chap01_thread.run;

import com.kh.chap01_thread.thread.Sub;
import com.kh.chap01_thread.thread.Sub2;

public class Run {
	
	/* 
	 * * 프로그램
	 *  - 어떤 작업을 실행할 수 있는 파일(cpu로부터 자원을 할당받지 않은 상태)
	 *  
	 * * 프로세스
	 *  - 현재 동작 하고 있는 프로그램(cpu로부터 자원을 할당받음)
	 * 
	 * * 스레드
	 *  - 한 개의 프로세스(process)내에서 실제로 작업을 수행하는 최소 단위.
	 *  - 모든 프로세스에는 한 개 이상의 스레드가 존재하여 작업을 수행
	 *  - 스레드는 메인 스레드와 일반스레드가 존재함.
	 *  
	 *  싱글 스레드?
	 *   - 메인 스레드 1개가지고 작업을 처리. 주어진 작업을 차례대로 처리한다.
	 * 
	 *  멀티 스레드?
	 *   - 메인 스레드 외 추가적인 스레드를 이용하여 여러 작업을 동시에 처리한다.
	 * 
	 *  멀티 스레드 장점
	 *  1) 자원을 좀더 효율적으로 사용할 수 있다.
	 *   A, B쓰레드 나눠서 작업을 시킴으로써 효율적인 자원 사용 가능.
	 *  
	 *  2) 사용자 입장에서 일처리가 빨라보인다(응답성 향상)
	 *  
	 *  3) 작업이 분리되어 코드가 간결해진다.
	 *     쓰레드별로 작업시킬 코드를 분리할 수 있으므로 코드가 간결해진다.
	 *  
	 *  4) CPU사용이 효율적으로 바뀐다.
	 *     싱글스레드에서 하나의 작업이 완료되기 까지 노는 CPU자원이 생기는데, 멀티스레드에서는 여러작업이 동
	 *     시에 수행되므로 CPU 대기시간이 줄어든다.
	 * 
	 *  멀티스레드의 단점
	 *  1) 스레드간에 공유하는 자원이 존재하는 경우 동기화 문제가 발생할 수 있다.
	 *  2) 동기화 처리시 잘못된 코드작성으로 교착상태가 발생할 수 있다.
	 *  3) 프로그램이 복잡해진다.
	 *  
	 * */
	
	public static void main(String[] args) throws Exception  {
		// throw new Exception("11111111"); // main쓰레드에서 에러 발생
		
		// 작업1이 완료되기 전까지 작업2로 넘어갈 수 없다.
//		for(int i = 1; i <= 100000000;i++) {
//			System.out.println("작업 1 ["+i+"]");
//		}
//		
//		for(int i = 1; i <= 100;i++) {
//			System.out.println("작업 2 ["+i+"]");
//		}
		
		// 작업1과 작업2를 동시에 수행시키고 싶다면 멀티스레드 환경을 만들어야함.
		
		// 스레드 생성방법1. Thread클래스를 상속받기
		Thread th1 = new Sub();
		
		// 스레드 시작
		th1.start();

		// 스레드 생성방법2. Runnable인터페이스를 통해 run메서드만 구현
		Thread th2 = new Thread(new Sub2());
		
		th2.start();
		/* 
		 * 스레드의 특징
		 * 1. 스레드는 동시에 여러개 실행 가능하다. -> 더 빠른 반응성을 가져다줌.
		 * 2. 메인스레드가 종료되더라도 실행중인 스레드가 있다면 프로세스는 종료되지 않는다.
		 * 3. 실행결과가 매번 다르게 보인다. 
		 * 4. 하나의 스레드에서 에러가 발생해도 다른 스레드에 영향을 끼치지 않는다.
		 * 
		 * 스레드가 많으면 좋은가? no
		 *  - 적정 개수를 유지하는게 가장 중요하다. 
		 *  - 스레드를 생성하기위한 비용과, 유지하는데 드는 지속적인 자원을 소비하기 때문.
		 * */
		System.out.println("메인 스레드 종료");
	}
	
	
	
	
	
	
}
